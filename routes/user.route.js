const authenticate = require("../middleware/auth");
const express     = require('express');
const router      =  new express.Router();
const User        = require('../models/users');
const Exchange        = require('../models/exchanges');
const Magazine        = require('../models/magazines');
const {ObjectID}  = require('mongodb');
var cors = require('./cors');



router.post('/', async (req, res) => {
  //find an existing user
  let user = await User.findOne({ email: req.body.email });
  if (user) return res.status(400).send("User already registered.");

  user = new User({
    username: req.body.username,
    password: req.body.password,
    email: req.body.email,
    birthDate: req.body.birthdate,
    gender: req.body.gender,
    preferences  : req.body.preferences //revisar
  });
  try{
      const token = await user.newAuthToken()
      res.status(201).send({user, token})
  }catch(e){
      res.status(400).send(e)
  }
})

router.post('/login', async (req, res) => {
  try {
      const user = await User.checkValidCredentials(req.body.email, req.body.password)
      const token = await user.newAuthToken()
      res.send({ user, token})
  } catch (error) {
      res.status(400).send()
}
})

//photo
const storage = multer.diskStorage({
   destination: "./public/uploads/",
   filename: function(req, file, cb){
      cb(null,"IMAGE-" + Date.now() + path.extname(file.originalname));
   }
});

const upload = multer({
    storage: storage,
    limits:{fileSize: 1000000},
 })

router.post('/upload',upload.single('fileData'), (req, res,next) => {
    logger.info(req.file);//this will be automatically set by multer
    logger.info(req.body);
    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
    fs.readFile(req.file.path,(err, contents)=> {
     if (err) {
     console.log('Error: ', err);
    }else{
     console.log('File contents ',contents);
    }
   });
  });



router.patch('/me',authenticate ,async (req,res) => {
  const updates  = Object.keys(req.body)
  const allowedUpdates = ["name", "email", "password", "age", "garmentList", "preferences", "biography"]
  const isValidOperation = updates.every((update) => allowedUpdates.includes(update))
  const _id =  req.user._id

  if(!isValidOperation){
      res.status(400).send({error:'Invalid request'})
  }

  if (!ObjectID.isValid(_id)) {
      return res.status(404).send();
  }

  try {
      updates.forEach((update) => req.user[update] = req.body[update])
      await req.user.save()
      res.send(req.user);
  } catch (error) {
      res.status(400).send()
  }

})

router.get('/me', authenticate ,async (req,res)=> {
  res.send(req.user)
})



router.delete('/me', authenticate, async (req,res) => {
  if (!ObjectID.isValid(req.user._id)) {
      return res.status(404).send();
  }

  try {
      await req.user.remove()
      res.send(req.user)
  } catch (error) {
      res.status(500).send()
  }
})

router.post('/logout', authenticate, async (req, res) => {
  try {
      req.user.tokens = req.user.tokens.filter((token) =>{
       return token.token !== req.token
      })
      await req.user.save()
      res.send()
  } catch (error) {
      res.status(500).send()
  }
})


router.post('/ogoutall', authenticate, async (req, res) => {
  try {
      req.user.tokens = []
      await req.user.save()
      res.send()
  } catch (error) {
      res.status(500).send()
  }
})

//rating
router.put('/rating/:id', authenticate, async (req, res) =>{
  const id = req.params.id;
  if (!ObjectID.isValid(id)) {
      return res.status(404).send("Id does not valid");
  }
  const user = await User.findOne({id})
  if (!user){
    res.status(404).send("User does not exist")
  }
  try {
    const rati = parseInt(req.body.rating, 10);
    user.rating = rati;
    await user.save()
    res.status(200).send("Rating updated")
  } catch (error) {
    res.status(500).send()
  }

})


//
router.get('/', authenticate, async (req, res) =>{
  const id = req.params.id;
  if (!ObjectID.isValid(id)) {
      return res.status(404).send("Id does not valid");
  }
  const user = await User.findOne({id})
  if (!user){
    res.status(404).send("User does not exist")
  }
  const allowedWardrobe = ["magazineList", "garmentList"]
  const isValidOpe = updates.every((wardrobe) => allowedWardrobe.includes(wardrobe))
  if(!isValidOpe){
      res.status(400).send({error:'Invalid request'})
  }
  res.status(500).send(req.user)

})


router.put('/me',authenticate ,async (req,res) => {
  try {
    const garementL = req.body.garmentList;
    user.garmentList = garementL;
    await user.save()
    res.status(200).send("Garment created")
  } catch (error) {
    res.status(500).send()
  }

})


// create magazine
router.post('/', async (req, res) => {
  const idUs = req.params.idUser;
  if (!ObjectID.isValid(id)) {
      return res.status(404).send("Id does not valid");
  }
  let user = await User.findOne({id})
  if (!user){
    res.status(404).send("User does not exist")
  }
//  if (user) return res.status(400).send("User already registered.");

  magazine = new Magazine({
    tags: req.body.tags, //array?
    garments: req.body.garments
  });
  try{
    res.status(200).send("Magazine created")
  } catch (error) {
    res.status(500).send("Can not created a new magazine")
  }
})

//update magaz
router.patch('/',authenticate ,async (req,res) => {
  const updates  = Object.keys(req.magazine.idUser)
  const allowedUpdates = ["tags", "garments"]
  const isValidOperation = updates.every((update) => allowedUpdates.includes(update))

  if(!isValidOperation){
      res.status(400).send({error:'Invalid request'})
  }

  try {
      updates.forEach((update) => req.user[update] = req.magazine.idUser[update])
      await req.user.save()
      res.send(req.user);
  } catch (error) {
      res.status(400).send()
  }

})

router.delete('/', authenticate, async (req,res) => {
  if (!ObjectID.isValid(req.magazine.IdUser)) {
      return res.status(404).send();
  }

  try {
      await req.magazine.remove()
      res.send(req.magazine)
  } catch (error) {
      res.status(500).send("Magazine deleted")
  }
})

// create excha
router.post('/', async (req, res) => {
  const idUs = req.params.idUserOne;
  if (!ObjectID.isValid(id)) {
      return res.status(404).send("Id does not valid");
  }
  let exchang = await Exchange.findOne({idUs});

  //if (user) return res.status(400).send("User already registered.");
  exchang = new Exchange({
    idUSerTwo: req.body.idUSerTwo,
    idGarmentOne: req.body.idGarmentOne,
    idGarmentTwo: req.body.idGarmentTwo,
    proposalDate: req.body.proposalDate,
    acceptanceDate: req.body.acceptanceDate,
    matchDate: req.body.matchDate,
    state: parseInt(req.body.state,10)
  });




module.exports = router
